static void Floods_in_city(Element A[], int n) {
    int i = 0;//pointer
    stack s = new stack();
    s.top = -1;
    Element element, next;//the top element and the next one
 
    int V = 0;//total volume of water in city

    /* push the first element to stack */
    s.push(arr[0]);

    // iterate for rest of the elements
    for (i = 1; i < n; i++) {
        next = A[i];

        if (s.isEmpty() == false) {

            // if stack is not empty, then
            // pop an element from stack
            element = s.pop();

            /* If the popped element is smaller than
               next, then a) print the pair b) keep
               popping while elements are smaller and
               stack is not empty */
            while (element.value <= next.value) {

                A[element.index] = i;
                //System.out.println(element + " --> " + next);
                if (s.isEmpty() == true)
                    break;
                element = s.pop();

            }

            /* If element is greater than next, then
               push the element back */
            if (element.value > next.value)
                s.push(element);

        }

        /* push next to stack so that we can find next
           greater for it */
        s.push(next);
    }

    /* After iterating over the loop, the remaining
       elements in stack do not have the next greater
       element */
    while (s.isEmpty() == false) {
        element = s.pop();
        //next = -1;
        System.out.println(element.index + " -- " + "void");
    }


    int k = 0;
    
    for(; k < n; k++){      //part2, calculate the total amount of water 
        int V_minus = 0;    //total amount of elevation between current location and next larger element
        
        if (arr[k].value == 0 || arr[k].index == 0) {
            continue; //check next element, skip this one
        }

        else if( arr[k].index != 0 && arr[k].value != 0){

            for (int j = k+1; j < arr[k].index; j++) { // the section between current element and its next larger element
                V_minus += arr[j].value;
            }

            V += arr[k].value * (arr[k].index - k - 1) - V_minus; // subtract the sum of “elevation” in the section

            k = arr[k].index - 1; // current section completed, jump to the end so that next loop begins from new element

        }


    }

    System.out.print(V);
}
